Build Instructions
~~~~~~~~~~~~~~~~~~

The tfp build system is based on the bakefile program used by the wxWidgets
library.

The Bakefile system is being replaced with a CMake system. Currently
the is working for the Windows version only (see below). Still working on
on the Gnu/Linux and OSX versions.

The build is slightly complicated because of the use of a custom utility
"file2cpp" which is used to embed text files into the program. (It was also
used for image files, but these are now in xpm format.) As both the input and
output files of the file2cpp program are supplied, the utility is only
required if you need to edit the input files. The nmake-dep/tfp.mak file will
automatically create these files if the file2cpp program is in the path.

If you are using Visual Studio, you will need to make the text files manually,
details are coming shortly.

The build process is currently being modified to allow for the c++11 standard.

The Gnu/Linux build has been tested on Linux Mint 14 and Ubuntu 11.10


Bakefile Build Systems
~~~~~~~~~~~~~~~~~~~~~~

Windows Build
~~~~~~~~~~~~~

1) Download and install wxWidgets version 3.1.0.
   Ensure the environment variable WXWIN is set to wxWidgets root folder.

2) To compile the test program, download and install the CppUnit framework.
   Set the environment variable CPPUNIT to the library root folder.

3) To start the IDE, open the tfp\build\vc9 folder and
   double click the tfp.sln file.

   To compile from the commandline, open the Visual Studio 2008 (or equivalent)
   Command Prompt and navigate to the tfp\build\nmake (or nmake-dep) folder
   and, for the debug build, enter:-
       nmake -f tfp.mak
   or, for the release build:-
       nmake -f tfp.mak -D WX_DEBUG=0


Gnu/Linux Build
~~~~~~~~~~~~~~~

1) Install build tools
    sudo apt-get install build-essential libgtk2.0-dev libwebkitgtk-dev

2) Download the wxWidgets source file with Unix line endings and unpack it.
   From within a terminal, navigate to wxWidgets root directory:-
    mkdir gtk-build
    cd gtk-build
    ../configure --disable-shared
    make
    sudo make install

3) Also from within a terminal, navigate to the tfp/build/gnu directory.
    make
    ./tfp
   should run The family Pack program.

Note, the gnu build only includes the libraries and main program - not the
test program or utilities. Anyone with development experience on unix systems
should have no difficulty building these if required.

Mac/OSX Build
~~~~~~~~~~~~~

1) Download the wxWidgets library (to a folder which we will named wx) and The
   Family Pack code (to a folder which we will name tfp) together in the same
   folder.

2) In the terminal, navigate to the wx folder:-
    mkdir build-osx
    cd build-osx
    ../configure --with-osx-cocoa --disable-shared --prefix="$(pwd)"
    make

3) Also in the terminal, navigate to the tfp/build/gnu folder:-
    make WX_CONFIG=../../../wx/build-osx/wx-config

4) Create a application bundle with the resulting tfp binary file.
   (I am still investigating the best way of going about this)

Note the the developer is completely new to the mac system and this is his
first attempt at creating a mac app.


CMake Build Systems
~~~~~~~~~~~~~~~~~~~

Windows Build
~~~~~~~~~~~~~

1) Download the source files with the command:-
    git clone https://github.com/nickmat/TheFamilyPack.git --recurse-submodules
    cd TheFamilyPack\build
    cmake-vc-working.bat
    cd vc-working
    tfp.sln

   An alternative build directory can be created with the 
    cmake-msvc.bat
   file which creates a build directory 'msvc'. Use this if you want to
   experiment without disturbing the working directory.


Other Systems
~~~~~~~~~~~~~

If anyone successfully builds the project with other compilers or OS's then
please drop me a line to let me know how you got on.

